name: Bun Check with Advanced LangGraph Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  pull_request_target:
    types: [closed]
    branches: [ main ]

jobs:
  bun-check:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request_target'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          bun install
          npm install @langchain/langgraph @langchain/anthropic @langchain/core zod @octokit/rest lighthouse eslint typescript jest @typescript-eslint/parser @typescript-eslint/eslint-plugin jscpd @axe-core/cli nyc typedoc madge dependency-cruiser

      - name: Run tests with coverage
        run: |
          bun test --coverage
        continue-on-error: true
        id: test

      - name: Run development server
        run: |
          bun run dev &
          sleep 10
          kill $!
        continue-on-error: true
        id: dev

      - name: Run build
        run: bun run build
        continue-on-error: true
        id: build

      - name: Run Advanced LangGraph Analysis
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat << 'EOF' > analyze.mjs
          import { MessagesAnnotation, StateGraph, START, END } from "@langchain/langgraph";
          import { ChatAnthropic } from "@langchain/anthropic";
          import { tool } from '@langchain/core/tools';
          import { z } from 'zod';
          import { Octokit } from "@octokit/rest";
          import { execSync } from 'child_process';
          import { readFileSync, writeFileSync } from 'fs';

          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

          // Tool to analyze build results
          const analyzeBuild = tool((input) => {
              const devStatus = process.env.DEV_STATUS === 'success';
              const buildStatus = process.env.BUILD_STATUS === 'success';
              return {
                  dev: devStatus,
                  build: buildStatus,
                  summary: `Development server: ${devStatus ? 'passed' : 'failed'}\nBuild: ${buildStatus ? 'passed' : 'failed'}`
              };
          }, {
              name: 'analyze_build',
              description: 'Analyze current build results',
              schema: z.object({})
          });

          // Tool to analyze dependencies
          const analyzeDependencies = tool(() => {
              try {
                  const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
                  const dependencies = {
                      ...packageJson.dependencies,
                      ...packageJson.devDependencies
                  };
                  const outdatedDeps = execSync('npm outdated --json', { encoding: 'utf8' });
                  return {
                      totalDeps: Object.keys(dependencies).length,
                      outdated: JSON.parse(outdatedDeps || '{}'),
                  };
              } catch (error) {
                  return { error: 'Failed to analyze dependencies' };
              }
          }, {
              name: 'analyze_dependencies',
              description: 'Analyze project dependencies and their versions',
              schema: z.object({})
          });

          // Tool to analyze performance metrics
          const analyzePerformance = tool(() => {
              try {
                  const buildTime = execSync('bun run build --json 2>&1 | grep "Time" || echo "0ms"', { encoding: 'utf8' });
                  const bundleSize = execSync('du -sh .next || echo "0"', { encoding: 'utf8' });
                  return {
                      buildTime: buildTime.trim(),
                      bundleSize: bundleSize.trim()
                  };
              } catch (error) {
                  return { error: 'Failed to analyze performance' };
              }
          }, {
              name: 'analyze_performance',
              description: 'Analyze build performance metrics',
              schema: z.object({})
          });

          // Tool to analyze security
          const analyzeSecurity = tool(() => {
              try {
                  execSync('npm audit --json > security-report.json', { encoding: 'utf8' });
                  const securityReport = JSON.parse(readFileSync('security-report.json', 'utf8'));
                  return {
                      vulnerabilities: securityReport.metadata?.vulnerabilities || {},
                      advisories: Object.keys(securityReport.advisories || {}).length
                  };
              } catch (error) {
                  return { error: 'Failed to analyze security' };
              }
          }, {
              name: 'analyze_security',
              description: 'Analyze security vulnerabilities',
              schema: z.object({})
          });

          // Enhanced commit history analysis
          const getCommitHistory = tool(async () => {
              const output = execSync('git log --pretty=format:"%h - %s - %an - %ad" -n 5 --stat').toString();
              const commits = output.split('\n\n').map(commit => {
                  const [header, ...stats] = commit.split('\n');
                  const [hash, subject, author, date] = header.split(' - ');
                  return {
                      hash,
                      subject,
                      author,
                      date,
                      stats: stats.join('\n')
                  };
              });
              return { commits };
          }, {
              name: 'get_commit_history',
              description: 'Get detailed commit history with stats',
              schema: z.object({})
          });

          // Tool to categorize changes
          const categorizeChanges = tool(async () => {
              const diffStats = execSync('git diff HEAD~1 --stat').toString();
              const fileTypes = {
                  features: /feat:|feature:/i,
                  fixes: /fix:|bug:/i,
                  docs: /docs:|documentation:/i,
                  tests: /test:|spec:/i,
                  styles: /style:|css:|tailwind:/i,
                  refactor: /refactor:|improve:/i
              };
              
              const categories = {};
              Object.entries(fileTypes).forEach(([category, pattern]) => {
                  categories[category] = diffStats
                      .split('\n')
                      .filter(line => pattern.test(line))
                      .length;
              });
              
              return { categories };
          }, {
              name: 'categorize_changes',
              description: 'Categorize code changes by type',
              schema: z.object({})
          });

          // Tool to analyze code quality
          const analyzeCodeQuality = tool(() => {
              try {
                  // Run ESLint
                  execSync('npx eslint . --ext .ts,.tsx --format json > eslint-report.json', { encoding: 'utf8' });
                  const eslintReport = JSON.parse(readFileSync('eslint-report.json', 'utf8'));
                  
                  // Run TypeScript compiler for type coverage
                  execSync('npx tsc --noEmit', { encoding: 'utf8' });
                  
                  // Run code duplication check
                  execSync('npx jscpd . --reporters json --output jscpd-report', { encoding: 'utf8' });
                  const jscpdReport = JSON.parse(readFileSync('jscpd-report/jscpd-report.json', 'utf8'));
                  
                  return {
                      eslintIssues: eslintReport.length,
                      typeErrors: 0, // If we got here, no type errors
                      duplication: jscpdReport.statistics.total.percentage
                  };
              } catch (error) {
                  return { error: 'Failed to analyze code quality' };
              }
          }, {
              name: 'analyze_code_quality',
              description: 'Analyze code quality metrics',
              schema: z.object({})
          });

          // Tool to analyze performance trends
          const analyzePerformanceTrends = tool(async () => {
              try {
                  const commits = execSync('git log -n 5 --format="%H"').toString().split('\n').filter(Boolean);
                  const trends = [];
                  
                  for (const commit of commits) {
                      execSync(`git checkout ${commit}`);
                      const buildTime = execSync('bun run build --json 2>&1 | grep "Time" || echo "0ms"', { encoding: 'utf8' });
                      const bundleSize = execSync('du -sh .next || echo "0"', { encoding: 'utf8' });
                      trends.push({
                          commit,
                          buildTime: buildTime.trim(),
                          bundleSize: bundleSize.trim()
                      });
                  }
                  
                  execSync('git checkout -');
                  return { trends };
              } catch (error) {
                  return { error: 'Failed to analyze performance trends' };
              }
          }, {
              name: 'analyze_performance_trends',
              description: 'Analyze performance trends across commits',
              schema: z.object({})
          });

          // Tool to suggest automated fixes
          const suggestFixes = tool(() => {
              try {
                  execSync('npx eslint . --ext .ts,.tsx --fix-dry-run --format json > fix-suggestions.json', { encoding: 'utf8' });
                  const fixSuggestions = JSON.parse(readFileSync('fix-suggestions.json', 'utf8'));
                  return {
                      fixableLintIssues: fixSuggestions.filter(issue => issue.fixable).length,
                      suggestions: fixSuggestions.map(issue => ({
                          file: issue.filePath,
                          message: issue.message,
                          fixable: issue.fixable
                      }))
                  };
              } catch (error) {
                  return { error: 'Failed to generate fix suggestions' };
              }
          }, {
              name: 'suggest_fixes',
              description: 'Suggest automated fixes for code issues',
              schema: z.object({})
          });

          // Tool to analyze test coverage
          const analyzeTestCoverage = tool(() => {
              try {
                  const coverageReport = JSON.parse(readFileSync('coverage/coverage-final.json', 'utf8'));
                  const summary = {
                      lines: coverageReport.total.lines.pct,
                      functions: coverageReport.total.functions.pct,
                      statements: coverageReport.total.statements.pct,
                      branches: coverageReport.total.branches.pct
                  };
                  return summary;
              } catch (error) {
                  return { error: 'Failed to analyze test coverage' };
              }
          }, {
              name: 'analyze_test_coverage',
              description: 'Analyze test coverage metrics',
              schema: z.object({})
          });

          // Tool to check accessibility
          const checkAccessibility = tool(async () => {
              try {
                  execSync('npx axe http://localhost:3000 --save accessibility-report.json', { encoding: 'utf8' });
                  const axeReport = JSON.parse(readFileSync('accessibility-report.json', 'utf8'));
                  return {
                      violations: axeReport.violations.length,
                      issues: axeReport.violations.map(v => ({
                          impact: v.impact,
                          description: v.description,
                          elements: v.nodes.length
                      }))
                  };
              } catch (error) {
                  return { error: 'Failed to check accessibility' };
              }
          }, {
              name: 'check_accessibility',
              description: 'Check accessibility compliance',
              schema: z.object({})
          });

          // Tool to analyze dependencies and their impact
          const analyzeImpact = tool(() => {
              try {
                  // Generate dependency graph
                  execSync('npx madge --image dependency-graph.svg .', { encoding: 'utf8' });
                  
                  // Analyze circular dependencies
                  const circularDeps = execSync('npx madge --circular .', { encoding: 'utf8' });
                  
                  // Generate detailed dependency report
                  execSync('npx depcruise --output-type json --output dependency-report.json .', { encoding: 'utf8' });
                  const depReport = JSON.parse(readFileSync('dependency-report.json', 'utf8'));
                  
                  return {
                      circularDependencies: circularDeps.split('\n').filter(Boolean).length,
                      totalModules: depReport.modules.length,
                      violations: depReport.violations.length,
                      impactedFiles: depReport.summary.violations.length
                  };
              } catch (error) {
                  return { error: 'Failed to analyze impact' };
              }
          }, {
              name: 'analyze_impact',
              description: 'Analyze dependency impact and violations',
              schema: z.object({})
          });

          // Tool to generate enhanced documentation
          const generateDocs = tool(() => {
              try {
                  // Generate TypeScript documentation
                  execSync('npx typedoc --out docs src', { encoding: 'utf8' });
                  
                  // Count documented items
                  const stats = {
                      components: execSync('find docs -type f -name "*.html" | wc -l', { encoding: 'utf8' }).trim(),
                      interfaces: execSync('grep -r "Interface" docs | wc -l', { encoding: 'utf8' }).trim(),
                      types: execSync('grep -r "Type" docs | wc -l', { encoding: 'utf8' }).trim()
                  };
                  
                  return stats;
              } catch (error) {
                  return { error: 'Failed to generate documentation' };
              }
          }, {
              name: 'generate_docs',
              description: 'Generate enhanced documentation',
              schema: z.object({})
          });

          // Add new tool for Prisma schema validation
          const validatePrismaSchema = tool(() => {
              try {
                  // Run Prisma validation
                  execSync('npx prisma validate', { encoding: 'utf8' });
                  
                  // Check for schema-query mismatches
                  const schema = readFileSync('prisma/schema.prisma', 'utf8');
                  const tsFiles = execSync('find . -type f -name "*.ts" -o -name "*.tsx"', { encoding: 'utf8' })
                      .split('\n')
                      .filter(Boolean);
                  
                  const queryErrors = [];
                  for (const file of tsFiles) {
                      const content = readFileSync(file, 'utf8');
                      const prismaQueries = content.match(/prisma\.[a-zA-Z]+\.[a-zA-Z]+\(/g) || [];
                      
                      for (const query of prismaQueries) {
                          const modelName = query.split('.')[1];
                          if (!schema.includes(`model ${modelName}`)) {
                              queryErrors.push(`Invalid model "${modelName}" in ${file}`);
                          }
                      }
                  }
                  
                  return {
                      schemaValid: true,
                      queryErrors,
                      suggestions: queryErrors.map(error => ({
                          error,
                          suggestion: 'Update schema or fix query to match schema definition'
                      }))
                  };
              } catch (error) {
                  return {
                      schemaValid: false,
                      error: error.message,
                      suggestions: [{
                          error: error.message,
                          suggestion: 'Run prisma generate and check schema definition'
                      }]
                  };
              }
          }, {
              name: 'validate_prisma_schema',
              description: 'Validate Prisma schema and detect query errors',
              schema: z.object({})
          });

          // Add new tool for database error detection
          const checkDatabaseErrors = tool(() => {
              try {
                  // Run Prisma diagnostics
                  execSync('npx prisma format', { encoding: 'utf8' });
                  
                  // Check for common database issues
                  const issues = [];
                  const schema = readFileSync('prisma/schema.prisma', 'utf8');
                  
                  // Check for missing relations
                  const relations = schema.match(/@relation\([^)]+\)/g) || [];
                  for (const relation of relations) {
                      if (!relation.includes('fields:') || !relation.includes('references:')) {
                          issues.push('Incomplete relation definition: ' + relation);
                      }
                  }
                  
                  // Check for missing indexes
                  const models = schema.match(/model\s+\w+\s*{[^}]+}/g) || [];
                  for (const model of models) {
                      const fields = model.match(/\w+\s+\w+(\[\])?/g) || [];
                      const indexes = model.match(/@index\([^)]+\)/g) || [];
                      
                      if (fields.length > 5 && indexes.length === 0) {
                          issues.push(`Model ${model.match(/model\s+(\w+)/)[1]} might need indexes`);
                      }
                  }
                  
                  return {
                      issues,
                      suggestions: issues.map(issue => ({
                          issue,
                          fix: issue.includes('relation') ? 
                              'Add fields and references to relation' : 
                              'Consider adding appropriate indexes'
                      }))
                  };
              } catch (error) {
                  return {
                      error: error.message,
                      suggestions: [{
                          issue: 'Database configuration error',
                          fix: 'Check database connection and schema'
                      }]
                  };
              }
          }, {
              name: 'check_database_errors',
              description: 'Check for database configuration and query errors',
              schema: z.object({})
          });

          const model = new ChatAnthropic({ 
            modelName: "claude-3-sonnet-20240229",
            anthropicApiKey: process.env.ANTHROPIC_API_KEY
          });
          const modelWithTools = model.bindTools([
              analyzeBuild,
              getCommitHistory,
              analyzeDependencies,
              analyzePerformance,
              analyzeSecurity,
              categorizeChanges,
              analyzeCodeQuality,
              analyzePerformanceTrends,
              suggestFixes,
              analyzeTestCoverage,
              checkAccessibility,
              analyzeImpact,
              generateDocs,
              validatePrismaSchema,
              checkDatabaseErrors
          ]);

          const workflow = new StateGraph(MessagesAnnotation)
              .addNode("initial_analysis", async (state) => {
                  const response = await modelWithTools.invoke([
                      {
                          role: "system",
                          content: "You are an expert CI/CD analyst. First analyze the current build results, dependencies, and code quality."
                      },
                      {
                          role: "user",
                          content: "Analyze the current build results, project dependencies, and code quality metrics."
                      }
                  ]);
                  return { messages: [response] };
              })
              .addNode("performance_analysis", async (state) => {
                  const response = await modelWithTools.invoke([
                      ...state.messages,
                      {
                          role: "user",
                          content: "Analyze performance metrics, trends, and security vulnerabilities."
                      }
                  ]);
                  return { messages: [...state.messages, response] };
              })
              .addNode("commit_analysis", async (state) => {
                  const response = await modelWithTools.invoke([
                      ...state.messages,
                      {
                          role: "user",
                          content: "Analyze commit history, categorize recent changes, and suggest improvements."
                      }
                  ]);
                  return { messages: [...state.messages, response] };
              })
              .addNode("fix_suggestions", async (state) => {
                  const response = await modelWithTools.invoke([
                      ...state.messages,
                      {
                          role: "user",
                          content: "Analyze potential automated fixes and provide detailed suggestions."
                      }
                  ]);
                  return { messages: [...state.messages, response] };
              })
              .addNode("test_coverage", async (state) => {
                  const response = await modelWithTools.invoke([
                      ...state.messages,
                      {
                          role: "user",
                          content: "Analyze test coverage and suggest improvements."
                      }
                  ]);
                  return { messages: [...state.messages, response] };
              })
              .addNode("accessibility", async (state) => {
                  const response = await modelWithTools.invoke([
                      ...state.messages,
                      {
                          role: "user",
                          content: "Check accessibility compliance and provide recommendations."
                      }
                  ]);
                  return { messages: [...state.messages, response] };
              })
              .addNode("impact_analysis", async (state) => {
                  const response = await modelWithTools.invoke([
                      ...state.messages,
                      {
                          role: "user",
                          content: "Analyze dependency impact and potential risks."
                      }
                  ]);
                  return { messages: [...state.messages, response] };
              })
              .addNode("database_analysis", async (state) => {
                  const response = await modelWithTools.invoke([
                      ...state.messages,
                      {
                          role: "user",
                          content: "Analyze database schema and detect potential issues."
                      }
                  ]);
                  return { messages: [...state.messages, response] };
              })
              .addNode("final_recommendations", async (state) => {
                  const response = await modelWithTools.invoke([
                      ...state.messages,
                      {
                          role: "user",
                          content: "Based on all analyses, provide final recommendations, action items, and documentation updates needed."
                      }
                  ]);
                  return { messages: [...state.messages, response] };
              });

          workflow
              .addEdge(START, "initial_analysis")
              .addEdge("initial_analysis", "performance_analysis")
              .addEdge("performance_analysis", "commit_analysis")
              .addEdge("commit_analysis", "fix_suggestions")
              .addEdge("fix_suggestions", "test_coverage")
              .addEdge("test_coverage", "accessibility")
              .addEdge("accessibility", "impact_analysis")
              .addEdge("impact_analysis", "database_analysis")
              .addEdge("database_analysis", "final_recommendations")
              .addEdge("final_recommendations", END);

          const graph = workflow.compile();
          const result = await graph.invoke({
              messages: []
          });

          const analysis = {
              initial: result.messages[0].content,
              performance: result.messages[1].content,
              commits: result.messages[2].content,
              fixes: result.messages[3].content,
              testCoverage: result.messages[4].content,
              accessibility: result.messages[5].content,
              impact: result.messages[6].content,
              database: result.messages[7].content,
              recommendations: result.messages[8].content
          };

          console.log(JSON.stringify(analysis));
          EOF

          export DEV_STATUS='${{ steps.dev.outcome }}'
          export BUILD_STATUS='${{ steps.build.outcome }}'
          export GITHUB_REPOSITORY='${{ github.repository }}'
          node analyze.mjs > analysis_result.json

      - name: Create comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const analysisResult = JSON.parse(fs.readFileSync('analysis_result.json', 'utf8'));
            const devStatus = '${{ steps.dev.outcome }}' === 'success' ? '✅' : '❌';
            const buildStatus = '${{ steps.build.outcome }}' === 'success' ? '✅' : '❌';
            const testStatus = '${{ steps.test.outcome }}' === 'success' ? '✅' : '❌';
            
            const body = `## Bun Check Results
            
            | Check | Status |
            |-------|--------|
            | Development Server | ${devStatus} |
            | Production Build | ${buildStatus} |
            | Tests | ${testStatus} |
            
            ## Build, Dependencies & Code Quality Analysis
            ${analysisResult.initial}
            
            ## Performance & Security Analysis
            ${analysisResult.performance}
            
            ## Test Coverage Analysis
            ${analysisResult.testCoverage}
            
            ## Accessibility Compliance
            ${analysisResult.accessibility}
            
            ## Impact Analysis
            ${analysisResult.impact}
            
            ## Database Analysis
            ${analysisResult.database}
            
            ## Commit Analysis
            ${analysisResult.commits}
            
            ## Automated Fix Suggestions
            ${analysisResult.fixes}
            
            ## Recommendations & Action Items
            ${analysisResult.recommendations}
            
            ${devStatus === '❌' ? '\n⚠️ Development server check failed' : ''}
            ${buildStatus === '❌' ? '\n⚠️ Production build failed' : ''}
            ${testStatus === '❌' ? '\n⚠️ Tests failed' : ''}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      - name: Check status
        if: steps.dev.outcome != 'success' || steps.build.outcome != 'success' || steps.database.outcome != 'success'
        run: exit 1

  update-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install @langchain/langgraph @langchain/anthropic @langchain/core

      - name: Update Documentation
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat << 'EOF' > update-docs.mjs
          import { ChatAnthropic } from "@langchain/anthropic";
          import { readFileSync, writeFileSync } from 'fs';
          import { execSync } from 'child_process';

          const model = new ChatAnthropic({ 
            modelName: "claude-3-sonnet-20240229",
            anthropicApiKey: process.env.ANTHROPIC_API_KEY
          });

          async function updateDocs() {
              // Get merged PR changes
              const changes = execSync('git diff HEAD^1 HEAD --name-only').toString();
              const files = changes.split('\n').filter(Boolean);
              
              // Read README
              const readme = readFileSync('README.md', 'utf8');
              
              // Generate documentation updates
              const response = await model.invoke([
                  {
                      role: "system",
                      content: "You are a technical documentation expert. Update the project documentation based on the recent changes."
                  },
                  {
                      role: "user",
                      content: `Here are the recent changes:\n${changes}\n\nCurrent README:\n${readme}\n\nPlease suggest updates to the documentation.`
                  }
              ]);

              // Update README with AI suggestions
              const updatedReadme = response.content;
              writeFileSync('README.md', updatedReadme);
              
              // Commit and push changes
              execSync('git config --global user.name "github-actions[bot]"');
              execSync('git config --global user.email "github-actions[bot]@users.noreply.github.com"');
              execSync('git add README.md');
              execSync('git commit -m "docs: update documentation based on merged changes [skip ci]"');
              execSync('git push');
          }

          updateDocs().catch(console.error);
          EOF

          node update-docs.mjs 