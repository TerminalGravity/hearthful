// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // Uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Uses a direct connection
}

model User {
  id            String         @id
  email         String         @unique
  displayName   String?
  avatarUrl     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  events        Event[]        @relation("EventHost")
  rsvps         RSVP[]
  mealCreated   Meal[]
  gameCreated   Game[]
  photoAlbums   PhotoAlbum[]
  preferences   Json?
}

model Family {
  id          String         @id @default(cuid())
  name        String
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  members     FamilyMember[]
  events      Event[]
  meals       Meal[]
  games       Game[]
  subscription Subscription?
  photoAlbums PhotoAlbum[]
}

model FamilyMember {
  id          String   @id @default(cuid())
  userId      String   // This can be either a Clerk user ID or an email for pending members
  name        String   // Name is required now
  email       String   // Email is required now
  familyId    String
  role        Role     @default(MEMBER)
  joinedAt    DateTime @default(now())
  preferences Json?    // For storing dietary restrictions and game preferences
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  events      Event[]  @relation("EventParticipants")

  @@unique([userId, familyId])
  @@index([email])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  date        DateTime
  type        String   // "meal" or "game"
  details     Json?    // For storing meal or game specific details
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  family      Family       @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId    String
  participants FamilyMember[] @relation("EventParticipants")
  
  // Original relations
  host        User      @relation("EventHost", fields: [hostId], references: [id])
  hostId      String
  rsvps       RSVP[]
  meals       Meal[]
  games       Game[]
  photos      Photo[]
}

model RSVP {
  id        String     @id @default(cuid())
  userId    String
  eventId   String
  status    RSVPStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Meal {
  id           String   @id @default(cuid())
  name         String
  description  String?
  ingredients  String[]
  instructions String?
  category     String?
  familyId     String
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  family       Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  createdBy    User     @relation(fields: [createdById], references: [id])
  events       Event[]
}

model Game {
  id           String   @id @default(cuid())
  name         String
  description  String?
  instructions String?
  minPlayers   Int?
  maxPlayers   Int?
  ageRange     String?
  category     String?
  familyId     String
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  family       Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  createdBy    User     @relation(fields: [createdById], references: [id])
  events       Event[]
}

model Photo {
  id          String     @id @default(cuid())
  url         String
  caption     String?
  eventId     String?
  albumId     String?
  uploadedAt  DateTime   @default(now())
  event       Event?     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  album       PhotoAlbum? @relation(fields: [albumId], references: [id], onDelete: Cascade)
  s3Key       String     @unique
  contentType String
  size        Int
}

model UserPreference {
  id              String   @id @default(cuid())
  userId          String   @unique
  displayName     String?
  email           String?
  theme           String   @default("system")
  language        String   @default("en")
  emailFrequency  String   @default("daily")
  eventsUpdates   Boolean  @default(true)
  photosUpdates   Boolean  @default(true)
  mealsUpdates    Boolean  @default(true)
  gamesUpdates    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Subscription {
  id              String   @id @default(cuid())
  familyId        String   @unique
  family          Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  stripeCustomerId String?
  stripeSubscriptionId String?
  stripePriceId   String?
  stripeCurrentPeriodEnd DateTime?
  status          SubscriptionStatus @default(INACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PhotoAlbum {
  id          String   @id @default(cuid())
  name        String
  description String?
  familyId    String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [createdById], references: [id])
  photos      Photo[]
}

enum Role {
  ADMIN
  MEMBER
}

enum RSVPStatus {
  YES
  NO
  MAYBE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
}
