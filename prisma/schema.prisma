// This is a Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id
  email              String          @unique
  displayName        String?
  avatarUrl         String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  stripeCustomerId  String?         @unique
  stripeSubscriptionId String?

  familyMembers     FamilyMember[]
  events            Event[]
  rsvps             RSVP[]
  meals             Meal[]
  games             Game[]
  photoAlbums       PhotoAlbum[]    @relation("CreatedAlbums")
  uploadedPhotos    Photo[]         @relation("UploadedPhotos")
}

model Family {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  members     FamilyMember[]
  events      Event[]
  meals       Meal[]
  games       Game[]
  photoAlbums PhotoAlbum[]
}

model FamilyMember {
  id        String   @id @default(cuid())
  userId    String
  familyId  String
  role      String   @default("MEMBER")
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preferences Json?

  user      User    @relation(fields: [userId], references: [id])
  family    Family  @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
  @@index([userId])
  @@index([familyId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  location    String?
  familyId    String
  hostId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  family    Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  host      User       @relation(fields: [hostId], references: [id])
  rsvps     RSVP[]

  @@index([familyId])
  @@index([hostId])
}

model RSVP {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Meal {
  id          String   @id @default(cuid())
  name        String
  description String?
  ingredients String[]
  instructions String?
  category    String?
  familyId    String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  family    Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  createdBy User       @relation(fields: [createdById], references: [id])

  @@index([familyId])
  @@index([createdById])
}

model Game {
  id          String   @id @default(cuid())
  name        String
  description String?
  instructions String?
  minPlayers  Int?
  maxPlayers  Int?
  ageRange    String?
  category    String?
  familyId    String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  family    Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  createdBy User       @relation(fields: [createdById], references: [id])

  @@index([familyId])
  @@index([createdById])
}

model PhotoAlbum {
  id          String    @id @default(cuid())
  title       String
  description String?
  tags        String[]
  familyId    String
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  photos    Photo[]
  family    Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  createdBy User       @relation("CreatedAlbums", fields: [createdById], references: [id])

  @@index([familyId])
  @@index([createdById])
}

model Photo {
  id           String     @id @default(cuid())
  key          String     // S3 key
  url          String     // Signed URL
  isCover      Boolean    @default(false)
  albumId      String
  uploadedById String
  uploadedAt   DateTime   @default(now())

  album      PhotoAlbum @relation(fields: [albumId], references: [id], onDelete: Cascade)
  uploadedBy User      @relation("UploadedPhotos", fields: [uploadedById], references: [id])

  @@index([albumId])
  @@index([uploadedById])
}
